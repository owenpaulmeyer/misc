newtype State s1 s2 a = State {runState :: s1 -> (a, s2) }

return' :: a -> State s1 s1 a
return' a = State $ \s -> (a,s)

(>>>=) :: State s1 s11 t -> (t -> State s11 s2 a) -> State s1 s2 a
m >>>= k  = State $ \s -> let
	(a, s') = runState m s

	in runState (k a) s'
get   = State $ \s -> (s,s)
put s = State $ \_ -> ((), s)


test2 = 
	return' 1 >>>= \x ->
	return' 2 >>>= \y ->
	get >>>= \z ->
	put (show (x+y*z)) >>>= \_ ->
	return' z

go2 = runState test2 10

